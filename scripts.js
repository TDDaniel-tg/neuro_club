// ====================
// TELEGRAM BOT CONFIG
// ====================

// –í–ê–ñ–ù–û: –ó–∞–º–µ–Ω–∏—Ç–µ —ç—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å–≤–æ–∏!
// 1. –°–æ–∑–¥–∞–π—Ç–µ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ @BotFather –≤ Telegram
// 2. –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ ID —á–∞—Ç–∞
const TELEGRAM_CONFIG = {
    BOT_TOKEN: '7672901413:AAHd0SfBJC3HmwwYxhU_Dwtjzch-cl8GwgE', // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
    CHAT_ID: '-1002568274832'      // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –≤–∞—à–µ–≥–æ —á–∞—Ç–∞/–∫–∞–Ω–∞–ª–∞
};

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
async function sendToTelegram(message) {
    const url = `https://api.telegram.org/bot${TELEGRAM_CONFIG.BOT_TOKEN}/sendMessage`;
    
    const data = {
        chat_id: TELEGRAM_CONFIG.CHAT_ID,
        text: message,
        parse_mode: 'HTML'
    };

    try {
        const response = await fetch(url, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(data)
        });

        const result = await response.json();
        return result.ok;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', error);
        return false;
    }
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è Telegram
function formatTelegramMessage(formData) {
    const timestamp = new Date().toLocaleString('ru-RU');
    
    return `
üéØ <b>–ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê - –ù–µ–π—Ä–æ–ö–ª—É–±</b>

üë§ <b>–ò–º—è:</b> ${formData.name}
üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${formData.phone}
üí∞ <b>–¢–∞—Ä–∏—Ñ:</b> ${formData.tariff || '–ù–µ —É–∫–∞–∑–∞–Ω'}
üóì <b>–î–∞—Ç–∞:</b> ${timestamp}

üí° <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>
${formData.additional || '–ù–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏'}

#–∑–∞—è–≤–∫–∞ #–Ω–µ–∏—Ä–æ–∫–ª—É–± #–Ω–æ–≤—ã–π–∫–ª–∏–µ–Ω—Ç
    `.trim();
}

// ====================
// –ù–ê–í–ò–ì–ê–¶–ò–Ø
// ====================

function scrollToCalculator() {
    const calculator = document.getElementById('calculator');
    if (calculator) {
        calculator.scrollIntoView({ behavior: 'smooth' });
    }
}

function scrollToPricing() {
    const pricing = document.getElementById('pricing');
    if (pricing) {
        pricing.scrollIntoView({ behavior: 'smooth' });
    }
}

// ====================
// –¢–ê–†–ò–§–´ –ò –°–°–´–õ–ö–ò
// ====================

// –°—Å—ã–ª–∫–∏ –¥–ª—è —Ç–∞—Ä–∏—Ñ–æ–≤ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–∏)
const TARIFF_LINKS = {
    'profi': 'https://your-payment-link-profi.com',
    'business': 'https://your-payment-link-business.com', 
    'vip': 'https://your-payment-link-vip.com'
};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–æ–≤ –ø–æ –∫–Ω–æ–ø–∫–∞–º —Ç–∞—Ä–∏—Ñ–æ–≤
document.addEventListener('DOMContentLoaded', function() {
    const tariffButtons = document.querySelectorAll('[data-tariff]');
    
    tariffButtons.forEach(button => {
        button.addEventListener('click', function(e) {
            e.preventDefault();
            const tariff = this.dataset.tariff;
            const link = TARIFF_LINKS[tariff];
            
            if (link && link !== '#') {
                // –ï—Å–ª–∏ —Å—Å—ã–ª–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –ø–æ –Ω–µ–π
                window.open(link, '_blank');
            } else {
                // –ï—Å–ª–∏ —Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É
                const finalForm = document.getElementById('final-cta-form');
                if (finalForm) {
                    finalForm.scrollIntoView({ behavior: 'smooth' });
                    finalForm.classList.add('highlight');
                    setTimeout(() => {
                        finalForm.classList.remove('highlight');
                    }, 2000);
                }
            }
        });
    });
});

// ====================
// –û–ë–†–ê–ë–û–¢–ö–ê –§–û–†–ú
// ====================

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–æ—Ä–º—ã
document.addEventListener('DOMContentLoaded', function() {
    const finalForm = document.getElementById('final-cta-form');
    
    if (finalForm) {
        finalForm.addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const submitButton = finalForm.querySelector('button[type="submit"]');
            const originalText = submitButton.textContent;
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
            submitButton.textContent = '–û—Ç–ø—Ä–∞–≤–ª—è–µ–º...';
            submitButton.disabled = true;
            
            // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
            const formData = {
                name: finalForm.querySelector('input[type="text"]').value,
                phone: finalForm.querySelector('input[type="tel"]').value,
                tariff: '–û—Å–Ω–æ–≤–Ω–æ–π —Ç–∞—Ä–∏—Ñ',
                additional: '–ó–∞—è–≤–∫–∞ —Å –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã'
            };
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
            const message = formatTelegramMessage(formData);
            const success = await sendToTelegram(message);
            
            if (success) {
                // –£—Å–ø–µ—à–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
                submitButton.textContent = '‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!';
                submitButton.style.backgroundColor = '#10B981';
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                showSuccessMessage('–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç.');
                
                // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
                finalForm.reset();
                
                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–Ω–æ–ø–∫—É —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
                setTimeout(() => {
                    submitButton.textContent = originalText;
                    submitButton.disabled = false;
                    submitButton.style.backgroundColor = '';
                }, 3000);
                
            } else {
                // –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
                submitButton.textContent = '‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏';
                submitButton.style.backgroundColor = '#EF4444';
                
                showErrorMessage('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –Ω–∞–ø—Ä—è–º—É—é.');
                
                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–Ω–æ–ø–∫—É —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
                setTimeout(() => {
                    submitButton.textContent = originalText;
                    submitButton.disabled = false;
                    submitButton.style.backgroundColor = '';
                }, 3000);
            }
        });
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ "–í—Å—Ç—É–ø–∏—Ç—å"
    const ctaButtons = document.querySelectorAll('.btn--primary');
    ctaButtons.forEach(button => {
        if (button.type !== 'submit' && button.textContent.includes('–í—Å—Ç—É–ø–∏—Ç—å') && !button.dataset.tariff) {
            button.addEventListener('click', function() {
                // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ —Ñ–æ—Ä–º–µ
                const finalForm = document.getElementById('final-cta-form');
                if (finalForm) {
                    finalForm.scrollIntoView({ behavior: 'smooth' });
                    // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º —Ñ–æ—Ä–º—É
                    finalForm.classList.add('highlight');
                    setTimeout(() => {
                        finalForm.classList.remove('highlight');
                    }, 2000);
                }
            });
        }
    });
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞–≤–∞—é—â–µ–π –∫–Ω–æ–ø–∫–∏
    const floatingCTA = document.getElementById('floatingCTA');
    if (floatingCTA) {
        floatingCTA.addEventListener('click', function() {
            const finalForm = document.getElementById('final-cta-form');
            if (finalForm) {
                finalForm.scrollIntoView({ behavior: 'smooth' });
                finalForm.classList.add('highlight');
                setTimeout(() => {
                    finalForm.classList.remove('highlight');
                }, 2000);
            }
        });
    }
});

// ====================
// –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø
// ====================

function showSuccessMessage(message) {
    const notification = document.createElement('div');
    notification.className = 'success-notification';
    notification.innerHTML = `
        <div class="notification-content">
            <svg width="24" height="24" viewBox="0 0 24 24" fill="none">
                <path d="M5 12L10 17L20 7" stroke="#10B981" stroke-width="2" stroke-linecap="round"/>
            </svg>
            <span>${message}</span>
        </div>
    `;
    
    document.body.appendChild(notification);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    setTimeout(() => notification.classList.add('show'), 100);
    
    // –£–±–∏—Ä–∞–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
        notification.classList.remove('show');
        setTimeout(() => document.body.removeChild(notification), 300);
    }, 5000);
}

function showErrorMessage(message) {
    const notification = document.createElement('div');
    notification.className = 'error-notification';
    notification.innerHTML = `
        <div class="notification-content">
            <svg width="24" height="24" viewBox="0 0 24 24" fill="none">
                <path d="M6 6L18 18M6 18L18 6" stroke="#EF4444" stroke-width="2" stroke-linecap="round"/>
            </svg>
            <span>${message}</span>
        </div>
    `;
    
    document.body.appendChild(notification);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    setTimeout(() => notification.classList.add('show'), 100);
    
    // –£–±–∏—Ä–∞–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
        notification.classList.remove('show');
        setTimeout(() => document.body.removeChild(notification), 300);
    }, 5000);
}

// ====================
// –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†
// ====================

// –ë–∞–∑–∞ –∑–∞–¥–∞—á –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ñ–µ—Ä—ã
const sphereTasks = {
    'marketing': [
        { name: '–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤', hours: 3, savings: 0.85 },
        { name: '–ê–Ω–∞–ª–∏–∑ —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏', hours: 4, savings: 0.8 },
        { name: '–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤', hours: 2, savings: 0.9 },
        { name: '–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–æ–≤', hours: 3, savings: 0.75 },
        { name: 'A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–µ–∞—Ç–∏–≤–æ–≤', hours: 2, savings: 0.85 }
    ],
    'development': [
        { name: '–ù–∞–ø–∏—Å–∞–Ω–∏–µ –∫–æ–¥–∞', hours: 6, savings: 0.7 },
        { name: '–û—Ç–ª–∞–¥–∫–∞ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ', hours: 4, savings: 0.8 },
        { name: '–°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏', hours: 2, savings: 0.9 },
        { name: '–†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥–∞', hours: 3, savings: 0.75 },
        { name: '–ü–æ–∏—Å–∫ —Ä–µ—à–µ–Ω–∏–π –ø—Ä–æ–±–ª–µ–º', hours: 2, savings: 0.85 }
    ],
    'design': [
        { name: '–°–æ–∑–¥–∞–Ω–∏–µ –ª–æ–≥–æ—Ç–∏–ø–æ–≤', hours: 4, savings: 0.8 },
        { name: '–î–∏–∑–∞–π–Ω –±–∞–Ω–Ω–µ—Ä–æ–≤', hours: 2, savings: 0.85 },
        { name: '–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π', hours: 3, savings: 0.9 },
        { name: '–°–æ–∑–¥–∞–Ω–∏–µ –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–π', hours: 5, savings: 0.75 },
        { name: 'UI/UX –¥–∏–∑–∞–π–Ω', hours: 6, savings: 0.7 }
    ],
    'video': [
        { name: '–ù–∞–ø–∏—Å–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤', hours: 3, savings: 0.8 },
        { name: '–°–æ–∑–¥–∞–Ω–∏–µ –º–æ–Ω—Ç–∞–∂–Ω—ã—Ö –ª–∏—Å—Ç–æ–≤', hours: 2, savings: 0.85 },
        { name: '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–¥–µ–π –¥–ª—è —Ä–æ–ª–∏–∫–æ–≤', hours: 2, savings: 0.9 },
        { name: '–ü–æ–¥–±–æ—Ä –º—É–∑—ã–∫–∏ –∏ –∑–≤—É–∫–æ–≤', hours: 1, savings: 0.75 },
        { name: '–°–æ–∑–¥–∞–Ω–∏–µ —Å—É–±—Ç–∏—Ç—Ä–æ–≤', hours: 2, savings: 0.95 }
    ],
    '3d': [
        { name: '3D –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ', hours: 8, savings: 0.7 },
        { name: '–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ç–æ—Ç–∏–ø–æ–≤', hours: 4, savings: 0.75 },
        { name: '–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤', hours: 6, savings: 0.8 },
        { name: '–†–µ–Ω–¥–µ—Ä–∏–Ω–≥', hours: 3, savings: 0.85 },
        { name: '–ê–Ω–∏–º–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–æ–≤', hours: 5, savings: 0.7 }
    ],
    'chatbots': [
        { name: '–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –¥–∏–∞–ª–æ–≥–æ–≤', hours: 4, savings: 0.85 },
        { name: '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–æ–≤', hours: 2, savings: 0.9 },
        { name: '–ö–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è –ª–∏–¥–æ–≤', hours: 3, savings: 0.8 },
        { name: '–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–æ–∫', hours: 4, savings: 0.95 },
        { name: '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–∏–∞–ª–æ–≥–æ–≤', hours: 2, savings: 0.75 }
    ],
    'construction': [
        { name: '–°–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å–º–µ—Ç', hours: 4, savings: 0.8 },
        { name: '–ö–æ–Ω—Ç—Ä–æ–ª—å –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–≤', hours: 3, savings: 0.6 },
        { name: '–ü–æ–¥–±–æ—Ä –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤', hours: 2, savings: 0.85 },
        { name: '–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç', hours: 3, savings: 0.7 },
        { name: '–î–æ–∫—É–º–µ–Ω—Ç–æ–æ–±–æ—Ä–æ—Ç', hours: 2, savings: 0.9 }
    ],
    'flowers': [
        { name: '–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–æ–≤', hours: 3, savings: 0.8 },
        { name: '–ü–æ–¥–±–æ—Ä –∫–æ–º–ø–æ–∑–∏—Ü–∏–π', hours: 2, savings: 0.75 },
        { name: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–∫–æ–π', hours: 2, savings: 0.85 },
        { name: '–†–∞–±–æ—Ç–∞ —Å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º–∏', hours: 2, savings: 0.7 },
        { name: '–í–µ–¥–µ–Ω–∏–µ —Å–æ—Ü—Å–µ—Ç–µ–π', hours: 2, savings: 0.9 }
    ],
    'realestate': [
        { name: '–ù–∞–ø–∏—Å–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π', hours: 2, savings: 0.85 },
        { name: '–ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞', hours: 3, savings: 0.8 },
        { name: '–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö —Ç—É—Ä–æ–≤', hours: 4, savings: 0.7 },
        { name: '–†–∞–±–æ—Ç–∞ —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏', hours: 4, savings: 0.6 },
        { name: '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤', hours: 2, savings: 0.9 }
    ],
    'legal': [
        { name: '–°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤', hours: 4, savings: 0.8 },
        { name: '–ê–Ω–∞–ª–∏–∑ –¥–æ–≥–æ–≤–æ—Ä–æ–≤', hours: 3, savings: 0.85 },
        { name: '–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏', hours: 2, savings: 0.6 },
        { name: '–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ü–µ–¥–µ–Ω—Ç–æ–≤', hours: 3, savings: 0.9 },
        { name: '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ—Ç—á–µ—Ç–æ–≤', hours: 2, savings: 0.85 }
    ],
    'ecommerce': [
        { name: '–ù–∞–ø–∏—Å–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏–π —Ç–æ–≤–∞—Ä–æ–≤', hours: 3, savings: 0.9 },
        { name: '–†–∞–±–æ—Ç–∞ —Å –æ—Ç–∑—ã–≤–∞–º–∏', hours: 2, savings: 0.85 },
        { name: 'SEO-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è', hours: 3, savings: 0.8 },
        { name: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–ª–∞–¥–æ–º', hours: 2, savings: 0.7 },
        { name: '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø—Ä–æ–¥–∞–∂', hours: 2, savings: 0.85 }
    ]
};

document.addEventListener('DOMContentLoaded', function() {
    const calculateBtn = document.getElementById('calculate-btn');
    const businessSelect = document.getElementById('business-sphere');
    const tasksGroup = document.getElementById('tasks-group');
    const hourlyRateSlider = document.getElementById('hourly-rate');
    const hourlyRateValue = document.getElementById('hourly-rate-value');
    const calculatorResults = document.getElementById('calculator-results');
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å–ª–∞–π–¥–µ—Ä–∞
    if (hourlyRateSlider && hourlyRateValue) {
        hourlyRateSlider.addEventListener('input', function() {
            hourlyRateValue.textContent = parseInt(this.value).toLocaleString('ru-RU');
        });
    }
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞—á –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å—Ñ–µ—Ä—ã
    if (businessSelect && tasksGroup) {
        businessSelect.addEventListener('change', function() {
            const sphere = this.value;
            tasksGroup.innerHTML = '';
            
            if (sphere && sphereTasks[sphere]) {
                sphereTasks[sphere].forEach((task, index) => {
                    const checkbox = document.createElement('label');
                    checkbox.className = 'checkbox';
                    checkbox.innerHTML = `
                        <input type="checkbox" name="ai-tasks" value="${sphere}-${index}" data-hours="${task.hours}" data-savings="${task.savings}">
                        <span class="checkbox__box"></span>
                        <span class="checkbox__label">${task.name} (${task.hours}—á/–¥–µ–Ω—å, —ç–∫–æ–Ω–æ–º–∏—è ${Math.round(task.savings * 100)}%)</span>
                    `;
                    tasksGroup.appendChild(checkbox);
                });
            }
        });
    }
    
    // –†–∞—Å—á–µ—Ç —ç–∫–æ–Ω–æ–º–∏–∏
    if (calculateBtn) {
        calculateBtn.addEventListener('click', function() {
            const selectedBusiness = businessSelect?.value;
            const selectedTasks = Array.from(document.querySelectorAll('input[name="ai-tasks"]:checked'));
            const hourlyRate = parseInt(hourlyRateSlider?.value) || 2000;
            
            if (!selectedBusiness || selectedTasks.length === 0) {
                showErrorMessage('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ñ–µ—Ä—É –±–∏–∑–Ω–µ—Å–∞ –∏ –æ—Ç–º–µ—Ç—å—Ç–µ –∑–∞–¥–∞—á–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞');
                return;
            }
            
            // –†–∞—Å—á–µ—Ç —ç–∫–æ–Ω–æ–º–∏–∏
            let totalHoursPerDay = 0;
            let averageSavings = 0;
            
            selectedTasks.forEach(task => {
                const hours = parseFloat(task.dataset.hours);
                const savings = parseFloat(task.dataset.savings);
                totalHoursPerDay += hours * savings;
                averageSavings += savings;
            });
            
            averageSavings = averageSavings / selectedTasks.length;
            
            // –†–∞—Å—á–µ—Ç—ã
            const hoursPerMonth = totalHoursPerDay * 22; // —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π –≤ –º–µ—Å—è—Ü–µ
            const timeSaved3Months = hoursPerMonth * 3;
            const moneySaved3Months = timeSaved3Months * hourlyRate;
            const additionalIncome = moneySaved3Months * 0.5; // 50% –æ—Ç —ç–∫–æ–Ω–æ–º–∏–∏ –∫–∞–∫ –¥–æ–ø. –¥–æ—Ö–æ–¥
            const clubCost = 18900;
            const roi = Math.round((moneySaved3Months / clubCost) * 100);
            const paybackDays = Math.ceil(clubCost / (totalHoursPerDay * hourlyRate));
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            const timeSavedElement = document.getElementById('time-saved-3months');
            const daysSavedElement = document.getElementById('days-saved');
            const moneySavedElement = document.getElementById('money-saved');
            const additionalIncomeElement = document.getElementById('additional-income');
            const roiElement = document.getElementById('roi-percentage');
            const paybackElement = document.getElementById('payback-days');
            const hoursPerMonthElement = document.getElementById('hours-per-month');
            
            if (timeSavedElement) timeSavedElement.textContent = Math.round(timeSaved3Months);
            if (daysSavedElement) daysSavedElement.textContent = Math.round(timeSaved3Months / 8);
            if (moneySavedElement) moneySavedElement.textContent = Math.round(moneySaved3Months).toLocaleString('ru-RU');
            if (additionalIncomeElement) additionalIncomeElement.textContent = Math.round(additionalIncome).toLocaleString('ru-RU');
            if (roiElement) roiElement.textContent = roi;
            if (paybackElement) paybackElement.textContent = paybackDays;
            if (hoursPerMonthElement) hoursPerMonthElement.textContent = Math.round(hoursPerMonth);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            if (calculatorResults) {
                calculatorResults.style.display = 'block';
                calculatorResults.scrollIntoView({ behavior: 'smooth' });
            }
        });
    }
});

// ====================
// –¢–ê–ë–´ –ù–ê–ü–†–ê–í–õ–ï–ù–ò–ô
// ====================

document.addEventListener('DOMContentLoaded', function() {
    const tabButtons = document.querySelectorAll('.tab-btn');
    const tabPanes = document.querySelectorAll('.tab-pane');
    
    tabButtons.forEach(button => {
        button.addEventListener('click', function() {
            const targetTab = this.dataset.tab;
            
            // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —Å–æ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫ –∏ –ø–∞–Ω–µ–ª–µ–π
            tabButtons.forEach(btn => btn.classList.remove('active'));
            tabPanes.forEach(pane => pane.classList.remove('active'));
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å –∫ —Ç–µ–∫—É—â–µ–π –∫–Ω–æ–ø–∫–µ
            this.classList.add('active');
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –ø–∞–Ω–µ–ª—å
            const targetPane = document.querySelector(`[data-content="${targetTab}"]`);
            if (targetPane) {
                targetPane.classList.add('active');
            }
        });
    });
});

// ====================
// –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
// ====================

// –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
window.addEventListener('scroll', function() {
    const progressBar = document.getElementById('progressBar');
    if (progressBar) {
        const scrolled = (window.pageYOffset / (document.documentElement.scrollHeight - window.innerHeight)) * 100;
        progressBar.style.width = scrolled + '%';
    }
});

// –ü–æ–∫–∞–∑/—Å–∫—Ä—ã—Ç–∏–µ –ø–ª–∞–≤–∞—é—â–µ–π –∫–Ω–æ–ø–∫–∏
window.addEventListener('scroll', function() {
    const floatingCTA = document.getElementById('floatingCTA');
    if (floatingCTA) {
        if (window.pageYOffset > 800) {
            floatingCTA.classList.add('show');
        } else {
            floatingCTA.classList.remove('show');
        }
    }
});

// FAQ –∞–∫–∫–æ—Ä–¥–µ–æ–Ω
document.addEventListener('DOMContentLoaded', function() {
    const faqQuestions = document.querySelectorAll('.faq-question');
    
    faqQuestions.forEach(question => {
        question.addEventListener('click', function() {
            const faqItem = this.parentElement;
            const answer = faqItem.querySelector('.faq-answer');
            
            // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ
            faqQuestions.forEach(otherQuestion => {
                if (otherQuestion !== question) {
                    otherQuestion.parentElement.classList.remove('active');
                }
            });
            
            // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â–∏–π
            faqItem.classList.toggle('active');
        });
    });
});

// –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', function() {
    const socialProof = document.getElementById('socialProof');
    const closeBtn = socialProof?.querySelector('.social-proof__close');
    
    const names = [
        '–ê–Ω–Ω–∞ –∏–∑ –ú–æ—Å–∫–≤—ã', '–°–µ—Ä–≥–µ–π –∏–∑ –°–ü–±', '–ú–∞—Ä–∏—è –∏–∑ –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥–∞',
        '–ê–ª–µ–∫—Å–µ–π –∏–∑ –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫–∞', '–ï–ª–µ–Ω–∞ –∏–∑ –ö–∞–∑–∞–Ω–∏', '–î–º–∏—Ç—Ä–∏–π –∏–∑ –†–æ—Å—Ç–æ–≤–∞',
        '–û–ª—å–≥–∞ –∏–∑ –ù–∏–∂–Ω–µ–≥–æ –ù–æ–≤–≥–æ—Ä–æ–¥–∞', '–ò–≥–æ—Ä—å –∏–∑ –°–∞–º–∞—Ä—ã', '–ù–∞—Ç–∞–ª—å—è –∏–∑ –û–º—Å–∫–∞'
    ];
    
    const avatars = [
        'image/user1.jpg', 'image/user2.jpg', 'image/user3.jpg',
        'image/user4.jpg', 'image/user5.jpg', 'image/user6.jpg',
        'image/user7.jpg', 'image/user8.jpg', 'image/user9.jpg'
    ];
    
    const actions = [
        '—Ç–æ–ª—å–∫–æ —á—Ç–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –ù–µ–π—Ä–æ–ö–ª—É–±—É',
        '–ø–æ–ª—É—á–∏–ª –¥–æ—Å—Ç—É–ø –∫ –±–∞–∑–µ –ø—Ä–æ–º–ø—Ç–æ–≤',
        '–Ω–∞—á–∞–ª —ç–∫–æ–Ω–æ–º–∏—Ç—å –≤—Ä–µ–º—è —Å –ò–ò',
        '—É–≤–µ–ª–∏—á–∏–ª –¥–æ—Ö–æ–¥ –Ω–∞ 40% –∑–∞ –º–µ—Å—è—Ü'
    ];
    
    function showSocialProof() {
        if (!socialProof) return;
        
        const randomIndex = Math.floor(Math.random() * names.length);
        const randomName = names[randomIndex];
        const randomAvatar = avatars[randomIndex];
        const randomAction = actions[Math.floor(Math.random() * actions.length)];
        
        const nameElement = socialProof.querySelector('strong');
        const actionElement = socialProof.querySelector('span');
        const avatarElement = socialProof.querySelector('.social-proof__avatar');
        
        if (nameElement && actionElement && avatarElement) {
            nameElement.textContent = randomName;
            actionElement.textContent = randomAction;
            avatarElement.src = randomAvatar;
        }
        
        socialProof.classList.add('show');
        
        setTimeout(() => {
            socialProof.classList.remove('show');
        }, 4000);
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 15-30 —Å–µ–∫—É–Ω–¥
    setInterval(showSocialProof, Math.random() * 15000 + 15000);
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    if (closeBtn) {
        closeBtn.addEventListener('click', function() {
            socialProof.classList.remove('show');
        });
    }
});

// –û–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á–µ—Ç
document.addEventListener('DOMContentLoaded', function() {
    const countdownElement = document.getElementById('price-countdown');
    
    if (countdownElement) {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, —á–µ—Ä–µ–∑ 3 –¥–Ω—è)
        const endDate = new Date();
        endDate.setDate(endDate.getDate() + 3);
        
        function updateCountdown() {
            const now = new Date().getTime();
            const distance = endDate.getTime() - now;
            
            const days = Math.floor(distance / (1000 * 60 * 60 * 24));
            const hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
            const minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
            const seconds = Math.floor((distance % (1000 * 60)) / 1000);
            
            if (distance > 0) {
                countdownElement.textContent = `${days} –¥–Ω—è ${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
            } else {
                countdownElement.textContent = '–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏—Å—Ç–µ–∫–ª–æ!';
            }
        }
        
        updateCountdown();
        setInterval(updateCountdown, 1000);
    }
});

// –ú–æ–±–∏–ª—å–Ω–æ–µ –º–µ–Ω—é
document.addEventListener('DOMContentLoaded', function() {
    const mobileToggle = document.querySelector('.mobile-menu-toggle');
    const nav = document.querySelector('.nav');
    
    if (mobileToggle && nav) {
        mobileToggle.addEventListener('click', function() {
            nav.classList.toggle('mobile-active');
            mobileToggle.classList.toggle('active');
        });
        
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ —Å—Å—ã–ª–∫—É
        const navLinks = nav.querySelectorAll('.nav__link');
        navLinks.forEach(link => {
            link.addEventListener('click', function() {
                nav.classList.remove('mobile-active');
                mobileToggle.classList.remove('active');
            });
        });
        
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ
        document.addEventListener('click', function(e) {
            if (!nav.contains(e.target) && !mobileToggle.contains(e.target)) {
                nav.classList.remove('mobile-active');
                mobileToggle.classList.remove('active');
            }
        });
    }
});

// ====================
// –ò–ù–°–¢–†–£–ö–¶–ò–Ø –ü–û –ù–ê–°–¢–†–û–ô–ö–ï
// ====================

console.log(`
üîó –ù–ê–°–¢–†–û–ô–ö–ê –°–°–´–õ–û–ö –ù–ê –û–ü–õ–ê–¢–£:

–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É —Ç–∞—Ä–∏—Ñ–æ–≤, –∑–∞–º–µ–Ω–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –æ–±—ä–µ–∫—Ç–µ TARIFF_LINKS:

const TARIFF_LINKS = {
    'profi': 'https://your-payment-link-profi.com',      // –°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É —Ç–∞—Ä–∏—Ñ–∞ "–ü—Ä–æ—Ñ–∏"
    'business': 'https://your-payment-link-business.com', // –°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É —Ç–∞—Ä–∏—Ñ–∞ "–ë–∏–∑–Ω–µ—Å"
    'vip': 'https://your-payment-link-vip.com'           // –°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É —Ç–∞—Ä–∏—Ñ–∞ "VIP"
};

üí° –ü—Ä–∏–º–µ—Ä—ã –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö —Å–∏—Å—Ç–µ–º:
- Robokassa: https://auth.robokassa.ru/Merchant/Index.aspx
- YooKassa: https://yookassa.ru/
- Tinkoff: https://business.tinkoff.ru/
- PayPal: https://www.paypal.com/

ü§ñ –ù–ê–°–¢–†–û–ô–ö–ê TELEGRAM BOT:

1. –û—Ç–∫—Ä–æ–π—Ç–µ Telegram –∏ –Ω–∞–π–¥–∏—Ç–µ @BotFather
2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /newbot
3. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞
4. –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 123456789:ABCdefGHIjklMNOpqrsTUVwxyz)
5. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –≤–∞—à –∫–∞–Ω–∞–ª/—á–∞—Ç –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
6. –ü–æ–ª—É—á–∏—Ç–µ ID —á–∞—Ç–∞:
   - –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç —Å –±–æ—Ç–æ–º
   - –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: https://api.telegram.org/bot[–í–ê–®_–¢–û–ö–ï–ù]/getUpdates
   - –ù–∞–π–¥–∏—Ç–µ "chat":{"id": –≤ –æ—Ç–≤–µ—Ç–µ
7. –ó–∞–º–µ–Ω–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ TELEGRAM_CONFIG

‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û:
- –£–¥–∞–ª–µ–Ω —Ç–∞—Ä–∏—Ñ –∑–∞ 990‚ÇΩ
- –î–æ–±–∞–≤–ª–µ–Ω–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—Å—Ç–∞–≤–∫–∏ —Å—Å—ã–ª–æ–∫ –≤ –∫–Ω–æ–ø–∫–∏ —Ç–∞—Ä–∏—Ñ–æ–≤
- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –±—É—Ä–≥–µ—Ä-–º–µ–Ω—é (—Ç–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ)
- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä (–¥–æ–±–∞–≤–ª–µ–Ω—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤)
- –î–æ–±–∞–≤–ª–µ–Ω—ã —Ç–∞–±—ã –¥–ª—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π

‚ùó –í–ê–ñ–ù–û: –ù–µ –ø—É–±–ª–∏–∫—É–π—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –≤ –æ—Ç–∫—Ä—ã—Ç–æ–º –¥–æ—Å—Ç—É–ø–µ!
`); 