// ====================
// TELEGRAM BOT CONFIG
// ====================

// –í–ê–ñ–ù–û: –ó–∞–º–µ–Ω–∏—Ç–µ —ç—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å–≤–æ–∏!
// 1. –°–æ–∑–¥–∞–π—Ç–µ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ @BotFather –≤ Telegram
// 2. –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ ID —á–∞—Ç–∞
const TELEGRAM_CONFIG = {
    BOT_TOKEN: '7672901413:AAHd0SfBJC3HmwwYxhU_Dwtjzch-cl8GwgE', // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
    CHAT_ID: '-1002568274832'      // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –≤–∞—à–µ–≥–æ —á–∞—Ç–∞/–∫–∞–Ω–∞–ª–∞
};

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
async function sendToTelegram(message) {
    const url = `https://api.telegram.org/bot${TELEGRAM_CONFIG.BOT_TOKEN}/sendMessage`;
    
    const data = {
        chat_id: TELEGRAM_CONFIG.CHAT_ID,
        text: message,
        parse_mode: 'HTML'
    };

    try {
        const response = await fetch(url, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(data)
        });

        const result = await response.json();
        return result.ok;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', error);
        return false;
    }
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è Telegram
function formatTelegramMessage(formData) {
    const timestamp = new Date().toLocaleString('ru-RU');
    
    return `
üéØ <b>–ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê - –ù–µ–π—Ä–æ–ö–ª—É–±</b>

üë§ <b>–ò–º—è:</b> ${formData.name}
üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${formData.phone}
üí∞ <b>–¢–∞—Ä–∏—Ñ:</b> ${formData.tariff || '–ù–µ —É–∫–∞–∑–∞–Ω'}
üóì <b>–î–∞—Ç–∞:</b> ${timestamp}

üí° <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>
${formData.additional || '–ù–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏'}

#–∑–∞—è–≤–∫–∞ #–Ω–µ–∏—Ä–æ–∫–ª—É–± #–Ω–æ–≤—ã–π–∫–ª–∏–µ–Ω—Ç
    `.trim();
}

// ====================
// –û–ë–†–ê–ë–û–¢–ö–ê –§–û–†–ú
// ====================

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–æ—Ä–º—ã
document.addEventListener('DOMContentLoaded', function() {
    const finalForm = document.getElementById('final-cta-form');
    
    if (finalForm) {
        finalForm.addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const submitButton = finalForm.querySelector('button[type="submit"]');
            const originalText = submitButton.textContent;
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
            submitButton.textContent = '–û—Ç–ø—Ä–∞–≤–ª—è–µ–º...';
            submitButton.disabled = true;
            
            // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
            const formData = {
                name: finalForm.querySelector('input[type="text"]').value,
                phone: finalForm.querySelector('input[type="tel"]').value,
                tariff: '–û—Å–Ω–æ–≤–Ω–æ–π —Ç–∞—Ä–∏—Ñ',
                additional: '–ó–∞—è–≤–∫–∞ —Å –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã'
            };
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
            const message = formatTelegramMessage(formData);
            const success = await sendToTelegram(message);
            
            if (success) {
                // –£—Å–ø–µ—à–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
                submitButton.textContent = '‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!';
                submitButton.style.backgroundColor = '#10B981';
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                showSuccessMessage('–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç.');
                
                // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
                finalForm.reset();
                
                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–Ω–æ–ø–∫—É —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
                setTimeout(() => {
                    submitButton.textContent = originalText;
                    submitButton.disabled = false;
                    submitButton.style.backgroundColor = '';
                }, 3000);
                
            } else {
                // –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
                submitButton.textContent = '‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏';
                submitButton.style.backgroundColor = '#EF4444';
                
                showErrorMessage('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –Ω–∞–ø—Ä—è–º—É—é.');
                
                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–Ω–æ–ø–∫—É —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
                setTimeout(() => {
                    submitButton.textContent = originalText;
                    submitButton.disabled = false;
                    submitButton.style.backgroundColor = '';
                }, 3000);
            }
        });
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ "–í—Å—Ç—É–ø–∏—Ç—å"
    const ctaButtons = document.querySelectorAll('.btn--primary');
    ctaButtons.forEach(button => {
        if (button.type !== 'submit' && button.textContent.includes('–í—Å—Ç—É–ø–∏—Ç—å')) {
            button.addEventListener('click', function() {
                // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ —Ñ–æ—Ä–º–µ
                const finalForm = document.getElementById('final-cta-form');
                if (finalForm) {
                    finalForm.scrollIntoView({ behavior: 'smooth' });
                    // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º —Ñ–æ—Ä–º—É
                    finalForm.classList.add('highlight');
                    setTimeout(() => {
                        finalForm.classList.remove('highlight');
                    }, 2000);
                }
            });
        }
    });
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞–≤–∞—é—â–µ–π –∫–Ω–æ–ø–∫–∏
    const floatingCTA = document.getElementById('floatingCTA');
    if (floatingCTA) {
        floatingCTA.addEventListener('click', function() {
            const finalForm = document.getElementById('final-cta-form');
            if (finalForm) {
                finalForm.scrollIntoView({ behavior: 'smooth' });
                finalForm.classList.add('highlight');
                setTimeout(() => {
                    finalForm.classList.remove('highlight');
                }, 2000);
            }
        });
    }
});

// ====================
// –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø
// ====================

function showSuccessMessage(message) {
    const notification = document.createElement('div');
    notification.className = 'success-notification';
    notification.innerHTML = `
        <div class="notification-content">
            <svg width="24" height="24" viewBox="0 0 24 24" fill="none">
                <path d="M5 12L10 17L20 7" stroke="#10B981" stroke-width="2" stroke-linecap="round"/>
            </svg>
            <span>${message}</span>
        </div>
    `;
    
    document.body.appendChild(notification);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    setTimeout(() => notification.classList.add('show'), 100);
    
    // –£–±–∏—Ä–∞–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
        notification.classList.remove('show');
        setTimeout(() => notification.remove(), 300);
    }, 5000);
}

function showErrorMessage(message) {
    const notification = document.createElement('div');
    notification.className = 'error-notification';
    notification.innerHTML = `
        <div class="notification-content">
            <svg width="24" height="24" viewBox="0 0 24 24" fill="none">
                <path d="M6 6L18 18M6 18L18 6" stroke="#EF4444" stroke-width="2" stroke-linecap="round"/>
            </svg>
            <span>${message}</span>
        </div>
    `;
    
    document.body.appendChild(notification);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    setTimeout(() => notification.classList.add('show'), 100);
    
    // –£–±–∏—Ä–∞–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
        notification.classList.remove('show');
        setTimeout(() => notification.remove(), 300);
    }, 5000);
}

// ====================
// –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–† –≠–ö–û–ù–û–ú–ò–ò
// ====================

document.addEventListener('DOMContentLoaded', function() {
    const calculateBtn = document.getElementById('calculate-btn');
    const businessSelect = document.getElementById('business-sphere');
    const tasksCheckboxes = document.querySelectorAll('input[name="ai-tasks"]');
    const budgetSlider = document.getElementById('budget-slider');
    const budgetValue = document.querySelector('.budget-value');
    const calculatorResult = document.querySelector('.calculator-result');
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å–ª–∞–π–¥–µ—Ä–∞
    if (budgetSlider && budgetValue) {
        budgetSlider.addEventListener('input', function() {
            budgetValue.textContent = parseInt(this.value).toLocaleString('ru-RU') + '‚ÇΩ';
        });
    }
    
    // –†–∞—Å—á–µ—Ç —ç–∫–æ–Ω–æ–º–∏–∏
    if (calculateBtn) {
        calculateBtn.addEventListener('click', function() {
            const selectedBusiness = businessSelect?.value;
            const selectedTasks = Array.from(tasksCheckboxes).filter(cb => cb.checked);
            const budget = budgetSlider?.value || 5000;
            
            if (!selectedBusiness || selectedTasks.length === 0) {
                showErrorMessage('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ñ–µ—Ä—É –±–∏–∑–Ω–µ—Å–∞ –∏ –∑–∞–¥–∞—á–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞');
                return;
            }
            
            // –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã —ç–∫–æ–Ω–æ–º–∏–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—Ñ–µ—Ä
            const economyCoefficients = {
                'marketing': 0.6,
                'development': 0.7,
                'design': 0.65,
                'video': 0.55,
                '3d': 0.6,
                'consulting': 0.5,
                'construction': 0.45,
                'flowers': 0.4,
                'realestate': 0.5,
                'legal': 0.55,
                'ecommerce': 0.6
            };
            
            const coefficient = economyCoefficients[selectedBusiness] || 0.5;
            const tasksMultiplier = Math.min(selectedTasks.length * 0.1 + 0.3, 0.8);
            
            const monthlyEconomy = budget * coefficient * tasksMultiplier;
            const yearlyEconomy = monthlyEconomy * 12;
            const timeSaved = selectedTasks.length * 2; // —á–∞—Å–æ–≤ –≤ –¥–µ–Ω—å
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if (calculatorResult) {
                calculatorResult.innerHTML = `
                    <div class="result-animation">
                        <h3>–í–∞—à –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª —ç–∫–æ–Ω–æ–º–∏–∏:</h3>
                        <div class="economy-stats">
                            <div class="stat">
                                <div class="stat-number">${monthlyEconomy.toLocaleString('ru-RU')}‚ÇΩ</div>
                                <div class="stat-label">—ç–∫–æ–Ω–æ–º–∏—è –≤ –º–µ—Å—è—Ü</div>
                            </div>
                            <div class="stat">
                                <div class="stat-number">${yearlyEconomy.toLocaleString('ru-RU')}‚ÇΩ</div>
                                <div class="stat-label">—ç–∫–æ–Ω–æ–º–∏—è –≤ –≥–æ–¥</div>
                            </div>
                            <div class="stat">
                                <div class="stat-number">${timeSaved}—á</div>
                                <div class="stat-label">–≤—Ä–µ–º–µ–Ω–∏ –≤ –¥–µ–Ω—å</div>
                            </div>
                        </div>
                        <p class="result-note">
                            –ü—Ä–∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ù–µ–π—Ä–æ–ö–ª—É–±–∞ 18,900‚ÇΩ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç—å —Å–æ—Å—Ç–∞–≤–∏—Ç –≤—Å–µ–≥–æ 
                            <strong>${Math.ceil(18900 / monthlyEconomy)} –¥–Ω—è</strong>!
                        </p>
                        <button class="btn btn--primary btn--large">
                            –ü–æ–ª—É—á–∏—Ç—å —ç—Ç—É —ç–∫–æ–Ω–æ–º–∏—é —Å–µ–π—á–∞—Å
                        </button>
                    </div>
                `;
                
                calculatorResult.style.display = 'block';
                calculatorResult.scrollIntoView({ behavior: 'smooth' });
                
                // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ –Ω–æ–≤—É—é –∫–Ω–æ–ø–∫—É
                const newBtn = calculatorResult.querySelector('.btn');
                newBtn.addEventListener('click', function() {
                    const finalForm = document.getElementById('final-cta-form');
                    if (finalForm) {
                        finalForm.scrollIntoView({ behavior: 'smooth' });
                        finalForm.classList.add('highlight');
                        setTimeout(() => {
                            finalForm.classList.remove('highlight');
                        }, 2000);
                    }
                });
            }
        });
    }
});

// ====================
// –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
// ====================

// –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
window.addEventListener('scroll', function() {
    const progressBar = document.getElementById('progressBar');
    if (progressBar) {
        const scrolled = (window.pageYOffset / (document.documentElement.scrollHeight - window.innerHeight)) * 100;
        progressBar.style.width = scrolled + '%';
    }
});

// –ü–æ–∫–∞–∑/—Å–∫—Ä—ã—Ç–∏–µ –ø–ª–∞–≤–∞—é—â–µ–π –∫–Ω–æ–ø–∫–∏
window.addEventListener('scroll', function() {
    const floatingCTA = document.getElementById('floatingCTA');
    if (floatingCTA) {
        if (window.pageYOffset > 800) {
            floatingCTA.classList.add('show');
        } else {
            floatingCTA.classList.remove('show');
        }
    }
});

// FAQ –∞–∫–∫–æ—Ä–¥–µ–æ–Ω
document.addEventListener('DOMContentLoaded', function() {
    const faqQuestions = document.querySelectorAll('.faq-question');
    
    faqQuestions.forEach(question => {
        question.addEventListener('click', function() {
            const faqItem = this.parentElement;
            const answer = faqItem.querySelector('.faq-answer');
            
            // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ
            faqQuestions.forEach(otherQuestion => {
                if (otherQuestion !== question) {
                    otherQuestion.parentElement.classList.remove('active');
                }
            });
            
            // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â–∏–π
            faqItem.classList.toggle('active');
        });
    });
});

// –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', function() {
    const socialProof = document.getElementById('socialProof');
    const closeBtn = socialProof?.querySelector('.social-proof__close');
    
    const names = [
        '–ê–Ω–Ω–∞ –∏–∑ –ú–æ—Å–∫–≤—ã', '–°–µ—Ä–≥–µ–π –∏–∑ –°–ü–±', '–ú–∞—Ä–∏—è –∏–∑ –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥–∞',
        '–ê–ª–µ–∫—Å–µ–π –∏–∑ –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫–∞', '–ï–ª–µ–Ω–∞ –∏–∑ –ö–∞–∑–∞–Ω–∏', '–î–º–∏—Ç—Ä–∏–π –∏–∑ –†–æ—Å—Ç–æ–≤–∞',
        '–û–ª—å–≥–∞ –∏–∑ –ù–∏–∂–Ω–µ–≥–æ –ù–æ–≤–≥–æ—Ä–æ–¥–∞', '–ò–≥–æ—Ä—å –∏–∑ –°–∞–º–∞—Ä—ã', '–ù–∞—Ç–∞–ª—å—è –∏–∑ –û–º—Å–∫–∞'
    ];
    
    const actions = [
        '—Ç–æ–ª—å–∫–æ —á—Ç–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –ù–µ–π—Ä–æ–ö–ª—É–±—É',
        '–ø–æ–ª—É—á–∏–ª –¥–æ—Å—Ç—É–ø –∫ –±–∞–∑–µ –ø—Ä–æ–º–ø—Ç–æ–≤',
        '–Ω–∞—á–∞–ª —ç–∫–æ–Ω–æ–º–∏—Ç—å –≤—Ä–µ–º—è —Å –ò–ò',
        '—É–≤–µ–ª–∏—á–∏–ª –¥–æ—Ö–æ–¥ –Ω–∞ 40% –∑–∞ –º–µ—Å—è—Ü'
    ];
    
    function showSocialProof() {
        if (!socialProof) return;
        
        const randomName = names[Math.floor(Math.random() * names.length)];
        const randomAction = actions[Math.floor(Math.random() * actions.length)];
        
        const nameElement = socialProof.querySelector('strong');
        const actionElement = socialProof.querySelector('span');
        
        if (nameElement && actionElement) {
            nameElement.textContent = randomName;
            actionElement.textContent = randomAction;
        }
        
        socialProof.classList.add('show');
        
        setTimeout(() => {
            socialProof.classList.remove('show');
        }, 4000);
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 15-30 —Å–µ–∫—É–Ω–¥
    setInterval(showSocialProof, Math.random() * 15000 + 15000);
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    if (closeBtn) {
        closeBtn.addEventListener('click', function() {
            socialProof.classList.remove('show');
        });
    }
});

// –û–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á–µ—Ç
document.addEventListener('DOMContentLoaded', function() {
    const countdownElement = document.getElementById('price-countdown');
    
    if (countdownElement) {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, —á–µ—Ä–µ–∑ 3 –¥–Ω—è)
        const endDate = new Date();
        endDate.setDate(endDate.getDate() + 3);
        
        function updateCountdown() {
            const now = new Date().getTime();
            const distance = endDate.getTime() - now;
            
            const days = Math.floor(distance / (1000 * 60 * 60 * 24));
            const hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
            const minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
            const seconds = Math.floor((distance % (1000 * 60)) / 1000);
            
            if (distance > 0) {
                countdownElement.textContent = `${days} –¥–Ω—è ${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
            } else {
                countdownElement.textContent = '–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏—Å—Ç–µ–∫–ª–æ!';
            }
        }
        
        updateCountdown();
        setInterval(updateCountdown, 1000);
    }
});

// –ú–æ–±–∏–ª—å–Ω–æ–µ –º–µ–Ω—é
document.addEventListener('DOMContentLoaded', function() {
    const mobileToggle = document.querySelector('.mobile-menu-toggle');
    const nav = document.querySelector('.nav');
    
    if (mobileToggle && nav) {
        mobileToggle.addEventListener('click', function() {
            nav.classList.toggle('active');
            mobileToggle.classList.toggle('active');
        });
        
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ —Å—Å—ã–ª–∫—É
        const navLinks = nav.querySelectorAll('.nav__link');
        navLinks.forEach(link => {
            link.addEventListener('click', function() {
                nav.classList.remove('active');
                mobileToggle.classList.remove('active');
            });
        });
    }
});

// ====================
// –ò–ù–°–¢–†–£–ö–¶–ò–Ø –ü–û –ù–ê–°–¢–†–û–ô–ö–ï
// ====================

console.log(`
ü§ñ –ù–ê–°–¢–†–û–ô–ö–ê TELEGRAM BOT:

1. –û—Ç–∫—Ä–æ–π—Ç–µ Telegram –∏ –Ω–∞–π–¥–∏—Ç–µ @BotFather
2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /newbot
3. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞
4. –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 123456789:ABCdefGHIjklMNOpqrsTUVwxyz)
5. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –≤–∞—à –∫–∞–Ω–∞–ª/—á–∞—Ç –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
6. –ü–æ–ª—É—á–∏—Ç–µ ID —á–∞—Ç–∞:
   - –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç —Å –±–æ—Ç–æ–º
   - –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: https://api.telegram.org/bot[–í–ê–®_–¢–û–ö–ï–ù]/getUpdates
   - –ù–∞–π–¥–∏—Ç–µ "chat":{"id": –≤ –æ—Ç–≤–µ—Ç–µ
7. –ó–∞–º–µ–Ω–∏—Ç–µ YOUR_BOT_TOKEN_HERE –∏ YOUR_CHAT_ID_HERE –≤ –∫–æ–¥–µ

üìù –ü—Ä–∏–º–µ—Ä –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:
const TELEGRAM_CONFIG = {
    BOT_TOKEN: '123456789:ABCdefGHIjklMNOpqrsTUVwxyz',
    CHAT_ID: '-1001234567890'
};

‚ùó –í–ê–ñ–ù–û: –ù–µ –ø—É–±–ª–∏–∫—É–π—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –≤ –æ—Ç–∫—Ä—ã—Ç–æ–º –¥–æ—Å—Ç—É–ø–µ!
`); 